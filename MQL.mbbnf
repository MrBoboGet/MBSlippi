term lpar = "\(";
term rpar = "\)";
term lcurl = "\{";
term rcurl = "\}";
term lsquare = "\[";
term rsquare = "\]";

term number = "[[:digit:]]+";
term string = "$\"((\\.|[^\"\\])*)\"";
term bool = "true|false";


term WITH = "WITH";
term IMPORT = "IMPORT";
term USING = "USING";
term AS = "AS";
term SELECT = "SELECT";
term RECORD = "RECORD";
term GAMES = "Games";
term GamePredicate = "GamePredicate";
term PlayerSelection = "PlayerSelection";
term FILTER = "Filter";
term PRINT = "PRINT";
term TABULATE = "TABULATE";
term INTO = "INTO";


term variable = "$\$([[:alnum:]_]+)";
term idf = "[[:alpha:]_]+[[:alnum:]_]*";

term semi = ";";
term leq = "<=";
term less = "<";
term bang = "!";
term geq = ">=";
term great = ">";
term neq = "!=";

term plus = "\+";
term minus = "-";
term mul = "\*";
term div = "/";

term colon = ":";
term comma = ",";
term eqq = "==";
term eq = "=";
term dot = "\.";
term OR = "\|\|";
term pipe = "\|";
term AND = "&&";
term add = "&";
term que = "\?";
skip "((( |\t|\n|\r)*)|(#.*\n))*";

struct Statement
{
    
}

struct VariableDeclaration : Statement
{
    tokenPos NamePosition;
    string Name;
}

struct VariableDeclaration_Filter : VariableDeclaration
{
    tokenPos FilterPosition;
    Filter_Component Component;
    Filter_ArgList Arguments;
}

struct VariableDeclaration_GameList : VariableDeclaration
{
    tokenPos GamePosition;
    GameSelection Selection;
}

struct VariableDeclaration_PlayerSelection : VariableDeclaration
{
    tokenPos GamePosition;
    GameInfoPredicate Predicate;
}
struct Identifier
{
    List<Token> Parts;
    tokenPos End;
}

struct VariableDeclaration_GameInfoPredicate : VariableDeclaration
{
    tokenPos GamePosition;
    GameInfoPredicate Predicate;
}

struct Module
{
    List<Statement> Statements;
}

struct Operator
{
    string Op;
}


struct Token
{
    tokenPos Position;
    string Value;
}


struct UsingDirective
{
    tokenPos UsingPosition;
    List<Token> GameSets;
    tokenPos End;
}

struct GameSelection
{
    UsingDirective  Using;
    PlayerAssignment Assignment;
    tokenPos SelectPosition;
    GameInfoPredicate GameCondition;
}
struct GameInfoPredicate_Conjunction
{
    string Conjunction;
    GameInfoPredicate RHS;
}

struct AttributeComponent
{
    tokenPos NamePosition;
    string Name;
}

struct GameInfoPredicate_Data
{
    
}

struct GameInfoPredicate_Direct : GameInfoPredicate_Data
{
    tokenPos ValuePosition;
    string Value;
    string Comparison;
    {uint64_t} DateLowerBound;
    {uint64_t} DateHigherBound;
    int ComponentCount = 0;
}

struct GameInfoPredicate
{
    tokenPos Begin;
    tokenPos End;
    Identifier Attribute;
    GameInfoPredicate_Data Data;
    string Operator;
    bool Negated = false;
    List<GameInfoPredicate> ExtraTerms;
}
struct GameInfoPredicate_OperatorList
{
    List<GameInfoPredicate> Terms;    
}

struct PlayerAssignment
{
    tokenPos WithPosition;
    tokenPos PlayerPosition;
    string AffectedPlayer;
    GameInfoPredicate PlayerCondition;
}

struct Filter_ArgList
{
    List<Filter_Arg> Arguments;    
}
struct Filter_Arg
{
}

struct Literal
{
    tokenPos ValuePosition;
}

struct Literal_String : Literal
{
    string Value; 
}
struct Literal_Symbol : Literal
{
    string Value; 
}
struct Literal_PosRef : Literal
{
    int Pos = 0;
}
struct Literal_Number : Literal
{
    int Value; 
}

struct Filter_Arg_Positional : Filter_Arg
{
    Filter_Component Argument;
}
struct Filter_Arg_Named : Filter_Arg
{
    tokenPos NamePosition;
    string Name;
    Filter_Component Argument;
}
struct AttributeList
{
    List<AttributeComponent> Attributes;
}

struct Filter_Component
{
    tokenPos Begin;
    tokenPos End;
    bool Negated = false;
}

struct Filter_Component_Func : Filter_Component
{
    tokenPos NamePosition;
    Identifier FilterName; 
    Filter_ArgList ArgumentList;
}
struct Filter_Component_Literal : Filter_Component
{
    Literal Value;
}
struct Filter_OperatorList : Filter_Component
{
    List<string> Operators;
    List<Filter_Component> Components;
}
struct Filter
{
    tokenPos FilterPosition;
    Filter_Component Component;
}
struct Result {}
struct Result_Record : Result
{
    tokenPos RecordPosition;
    tokenPos FilePosition;
    string OutFile;
}

struct Result_Print : Result
{
    tokenPos PrintPosition;
}
struct ColumnSpec
{
    Token Name;
    Filter_Component Metric;
}
struct Result_Tabulate : Result
{
    tokenPos TabulatePos;
    List<ColumnSpec> Columns;
    tokenPos IntoPos;
    Literal_String OutFile;
}

struct  ImportBinding
{
    tokenPos AsPosition;
    Token ImportName;
}
struct Import : Statement
{
    tokenPos ImportPosition;
    Identifier ImportPath;
    ImportBinding Binding;
    tokenPos End;
}

struct Selection : Statement
{
    GameSelection Games;
    Filter SituationFilter;
    Result Output;
}

def GameInfoPredicate_Base=GameInfoPredicate;


def Comparator=Operator;
def Combinator=Operator;
def ExprOperator=Operator;

Comparator = Op=less|Op=add|Op=great | Op=eq | Op=leq | Op=geq | Op=neq;
ExprOperator = Op=plus | 
               Op=minus | 
               Op=mul | 
               Op=div | 
               Op=less |
               Op=great | 
               Op=eqq | 
               Op=leq | 
               Op=geq | 
               Op=neq | 
               Op=pipe |
               Op=add;

Combinator = Op=pipe | Op=AND | Op = OR;

Filter_Arg = this=Filter_Arg_Named | this=Filter_Arg_Positional;
Filter_Arg_Named = NamePosition = TOKEN.Position Name=idf eq Argument=Filter_Component;
Filter_Arg_Positional = Argument=Filter_Component;
Filter_ArgList = lpar (Arguments=Filter_Arg (comma Arguments=Filter_Arg)*)? rpar;


Literal=this=Literal_String | this=Literal_Symbol | this=Literal_Number;
Literal_String = ValuePosition = TOKEN.Position Value=string;
Literal_Symbol = ValuePosition = TOKEN.Position Value=idf;
Literal_Number = ValuePosition = TOKEN.Position Value=number;


def Filter_Term=Filter_Component;

def Identifier2=Identifier;
def Token2=Token;
Identifier2 = Parts=Token2 (dot Parts=Token2)* End = TOKEN.Position;
Token2 = Position=TOKEN.Position Value=idf;
Filter_Component_Func = Begin = TOKEN.Position NamePosition=TOKEN.Position FilterName=Identifier2 ArgumentList=Filter_ArgList End=TOKEN.Position;



Filter_Term =   lpar this=Filter_Component rpar |
                this=Filter_Component_Func|
                this=Filter_Component_Literal|
                bang this=Filter_Term Negated=true;

Filter_Component_Literal = Value=Literal;

def Filter_Component=Filter_OperatorList;
Filter_Component = Begin = TOKEN.Position Components=Filter_Term (Operators=ExprOperator.Op Components=Filter_Term)* End = TOKEN.Position;


Filter= FilterPosition = TOKEN.Position FILTER Component=Filter_Component;


def GameInfoPredicate_Or=GameInfoPredicate;
def GameInfoPredicate_And=GameInfoPredicate;
def GameInfoPredicate_Direct=GameInfoPredicate_Direct;
GameInfoPredicate_Or =  Operator=OR this=GameInfoPredicateOr;
GameInfoPredicate_And = Operator=AND this=GameInfoPredicate;

GameInfoPredicate_Direct =  Comparison=Comparator.Op ValuePosition = TOKEN.Position Value=string;
GameInfoPredicate_Base = Begin = TOKEN.Position Attribute=Identifier Data=GameInfoPredicate_Direct? End = TOKEN.Position;


def GameInfoPredicateOr = GameInfoPredicate;
GameInfoPredicateOr = Begin = TOKEN.Position Operator="||" ExtraTerms=GameInfoPredicate_Term ExtraTerms=GameInfoPredicate_Or* End = TOKEN.Position;

def GameInfoPredicate_Term=GameInfoPredicate;
GameInfoPredicate_Term = 
    lpar this=GameInfoPredicate rpar |
    bang this=GameInfoPredicate_Term Negated=true | 
    this=GameInfoPredicate_Base;

GameInfoPredicate = Begin = TOKEN.Position Operator="&&" ExtraTerms=GameInfoPredicateOr ExtraTerms=GameInfoPredicate_And* End = TOKEN.Position;



GameSelection = Using=UsingDirective? 
                Assignment=PlayerAssignment? 
                SelectPosition = TOKEN.Position 
                SELECT 
                GameCondition=GameInfoPredicate;

PlayerAssignment =  WithPosition = TOKEN.Position 
                    WITH 
                    PlayerPosition = TOKEN.Position 
                    AffectedPlayer=idf 
                    PlayerCondition=GameInfoPredicate;
Result_Record = RecordPosition = TOKEN.Position RECORD  FilePosition = TOKEN.Position OutFile=string;
Result_Print = PrintPosition = TOKEN.Position PRINT;
ColumnSpec = (Name=Token eq)? Metric=Filter_Component;
Result_Tabulate = TabulatePos = TOKEN.Position TABULATE Columns=ColumnSpec (comma Columns=ColumnSpec)* (IntoPos=TOKEN.Position INTO OutFile=Literal_String)?;
Result = this=Result_Record | this=Result_Print | this=Result_Tabulate;

Selection =  Games=GameSelection SituationFilter=Filter? Output=Result semi;


VariableDeclaration_Filter = FilterPosition=TOKEN.Position FILTER NamePosition = TOKEN.Position Name = idf 
  Arguments=Filter_ArgList eq Component=Filter_Component semi;

VariableDeclaration_GameList = GamePosition=TOKEN.Position GAMES NamePosition = TOKEN.Position Name = idf eq Selection=GameSelection semi;
VariableDeclaration_PlayerSelection = GamePosition=TOKEN.Position PlayerSelection NamePosition = TOKEN.Position Name = idf eq 
    Predicate=GameInfoPredicate semi;
VariableDeclaration_GameInfoPredicate = GamePosition=TOKEN.Position GamePredicate NamePosition = TOKEN.Position Name = idf eq Predicate=GameInfoPredicate semi;
VariableDeclaration = this=VariableDeclaration_Filter | this=VariableDeclaration_GameList | this=VariableDeclaration_GameInfoPredicate 
    | this=VariableDeclaration_PlayerSelection;

Module = Statements=Statement*;

Slugma = Filter_Term Selection;

Identifier = Parts=Token (dot Parts=Token)* End=TOKEN.Position;


Token = Position=TOKEN.Position Value=idf;

UsingDirective = UsingPosition = TOKEN.Position USING GameSets=Token (comma GameSets=Token)* End=TOKEN.Position;


ImportBinding = AsPosition = TOKEN.Position AS ImportName=Token;
Import =  ImportPosition=TOKEN.Position IMPORT  ImportPath=Identifier Binding=ImportBinding? semi End = TOKEN.Position ;

Statement = this=VariableDeclaration | this=Selection | this=Import;
