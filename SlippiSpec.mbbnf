term lpar = "\(";
term rpar = "\)";
term lcurl = "\{";
term rcurl = "\}";
term lsquare = "\[";
term rsquare = "\]";

term number = "[[:digit:]]+";
term string = "$\"((\\.|[^\"\\])*)\"";
term bool = "true|false";


term WITH = "WITH";
term IMPORT = "IMPORT";
term AS = "AS";
term SELECT = "SELECT";
term RECORD = "RECORD";
term GAMES = "Games";
term GamePredicate = "GamePredicate";
term PlayerSelection = "PlayerSelection";
term FILTER = "Filter";
term PRINT = "PRINT";


term variable = "$\$([[:alnum:]_]+)";
term idf = "[[:alpha:]_]+[[:alnum:]_]*";

term semi = ";";
term leq = "<=";
term less = "<";
term bang = "!";
term geq = ">=";
term great = ">";
term neq = "!=";
term colon = ":";
term comma = ",";
term eq = "=";
term dot = "\.";
term OR = "\|\|";
term pipe = "\|";
term AND = "&&";
term add = "&";
term que = "\?";
skip "((( |\t|\n|\r)*)|(#.*\n))*";

struct Statement
{
    
}

struct VariableDeclaration : Statement
{
    tokenPos NamePosition;
    string Name;
}

struct VariableDeclaration_Filter : VariableDeclaration
{
    tokenPos FilterPosition;
    Filter_Component Component;
}

struct VariableDeclaration_GameList : VariableDeclaration
{
    tokenPos GamePosition;
    GameSelection Selection;
}

struct VariableDeclaration_PlayerSelection : VariableDeclaration
{
    tokenPos GamePosition;
    GameInfoPredicate Predicate;
}
struct Identifier
{
    List<Token> Parts;
}

struct FilterList
{
    List<Filter_Component> Components;
}
struct VariableDeclaration_GameInfoPredicate : VariableDeclaration
{
    tokenPos GamePosition;
    GameInfoPredicate Predicate;
}

struct Module
{
    List<Statement> Statements;
}

struct Operator
{
    string Op;
}


struct Token
{
    tokenPos Position;
    string Value;
}


struct UsingDirective
{
    List<Token> GameSets;
}

struct GameSelection
{
    UsingDirective  Using;
    PlayerAssignment Assignment;
    tokenPos SelectPosition;
    GameInfoPredicate GameCondition;
}
struct GameInfoPredicate_Conjunction
{
    string Conjunction;
    GameInfoPredicate RHS;
}

struct AttributeComponent
{
    tokenPos NamePosition;
    string Name;
}

struct GameInfoPredicate_Data
{
    
}

struct GameInfoPredicate_Direct : GameInfoPredicate_Data
{
    tokenPos ValuePosition;
    string Value;
    string Comparison;
    {uint64_t} DateLowerBound;
    {uint64_t} DateHigherBound;
    int ComponentCount = 0;
}

struct GameInfoPredicate
{
    Identifier Attribute;
    GameInfoPredicate_Data Data;
    string Operator;
    bool Negated = false;
    List<GameInfoPredicate> ExtraTerms;
}
struct GameInfoPredicate_OperatorList
{
    List<GameInfoPredicate> Terms;    
}

struct PlayerAssignment
{
    tokenPos WithPosition;
    tokenPos PlayerPosition;
    string AffectedPlayer;
    GameInfoPredicate PlayerCondition;
}

struct Filter_ArgList
{
    List<Filter_Arg> Arguments;    
}
struct Filter_Arg
{
}
struct Filter_Arg_Positional : Filter_Arg
{
    tokenPos ValuePosition;
    string Value; 
}
struct Filter_Arg_Named : Filter_Arg
{
    tokenPos NamePosition;
    string Name;
    tokenPos ValuePosition;
    string Value;
}
struct ArgList
{
    List<Filter_Arg> Args;
}
struct AttributeList
{
    List<AttributeComponent> Attributes;
}

struct Filter_Component_Data
{
    
}

struct Filter_Component_Variable : Filter_Component_Data
{
    tokenPos VariablePosition;
    string VariableName;
}
struct Filter_Component_Function : Filter_Component_Data
{
    tokenPos NamePosition;
    string FilterName; 
}

struct Filter_Component
{
    tokenPos NamePosition;
    Identifier FilterName; 
    bool Negated = false;
    Filter_ArgList ArgumentList;
    string Operator;
    List<Filter_Component> ExtraTerms;
}
struct Filter_OperatorList
{
    List<Filter_Component> Components;    
}
struct Filter
{
    tokenPos FilterPosition;
    Filter_Component Component;
}
struct Result {}
struct Result_Record : Result
{
    tokenPos RecordPosition;
    tokenPos FilePosition;
    string OutFile;
}

struct Result_Print : Result
{
    tokenPos PrintPosition;
}

struct Result_Tabulate : Result
{
        
}

struct  ImportBinding
{
    tokenPos AsPosition;
    Token ImportName;
}
struct Import : Statement
{
    tokenPos ImportPosition;
    Identifier ImportPath;
    ImportBinding Binding;
}

struct Selection : Statement
{
    GameSelection Games;
    Filter SituationFilter;
    Result Output;
}
def Selection=Selection;
def Result=Result;
def Result_Record=Result_Record;
def Result_Print = Result_Print;
def PlayerAssignment=PlayerAssignment;

def GameSelection=GameSelection;
def GameInfoPredicate=GameInfoPredicate;
def GameInfoPredicate_Base=GameInfoPredicate;

def Filter=Filter;
def Filter_Component=Filter_Component;
def Filter_Component_Base=Filter_Component;
def Filter_Arg=Filter_Arg;
def Filter_Arg_Named=Filter_Arg_Named;
def Filter_Arg_Positional=Filter_Arg_Positional;
def Filter_ArgList = ArgList;

def Operator=Operator;
def Comparator=Operator;
def Combinator=Operator;

Operator = Op=less|Op=pipe|Op=AND|Op=OR|Op=add|Op=great | Op=eq | Op=leq | Op=geq | Op=neq;
Comparator = Op=less|Op=add|Op=great | Op=eq | Op=leq | Op=geq | Op=neq;
Combinator = Op=pipe | Op=AND | Op = OR;

def Filter_Arg_Extra = Filter_Arg;
Filter_Arg_Extra = comma this=Filter_Arg;
Filter_Arg = this=Filter_Arg_Named | this=Filter_Arg_Positional;
Filter_Arg_Named = NamePosition = TOKEN.Position Name=idf eq ValuePosition = TOKEN.Position Value=string;
Filter_Arg_Positional = ValuePosition = TOKEN.Position Value=string;
def Filter_ArgList_Arguments = ArgList;
Filter_ArgList_Arguments = Args=Filter_Arg Args=Filter_Arg_Extra*;
Filter_ArgList = lpar this=Filter_ArgList_Arguments? rpar;


def Filter_Component_Or=Filter_Component;
def Filter_Term=Filter_Component;


Filter_Component_Or = Operator=pipe this=Filter_Term;
Filter_Component_Base = NamePosition=TOKEN.Position FilterName=Identifier ArgumentList.Arguments=Filter_ArgList.Args?;

Filter_Term =   lpar this=Filter_Component rpar |
                this=Filter_Component_Base |
                bang this=Filter_Term {ReturnValue.Negated=true;};

def FilterOr = Filter_Component;
def FilterAdd = Filter_Component;

FilterOr = {ReturnValue.Operator="|";} ExtraTerms=Filter_Term  ExtraTerms=Filter_Component_Or*;
FilterAdd = add this=FilterOr;

Filter_Component = {ReturnValue.Operator="&";} ExtraTerms=FilterOr ExtraTerms=FilterAdd*;

Filter= FilterPosition = TOKEN.Position FILTER Component=Filter_Component;


def GameInfoPredicate_Or=GameInfoPredicate;
def GameInfoPredicate_And=GameInfoPredicate;
def GameInfoPredicate_Direct=GameInfoPredicate_Direct;
GameInfoPredicate_Or =  Operator=OR this=GameInfoPredicateOr;
GameInfoPredicate_And = Operator=AND this=GameInfoPredicate;

GameInfoPredicate_Direct =  Comparison=Comparator.Op ValuePosition = TOKEN.Position Value=string;
GameInfoPredicate_Base = Attribute=Identifier Data=GameInfoPredicate_Direct?;


def GameInfoPredicateOr = GameInfoPredicate;
GameInfoPredicateOr = {ReturnValue.Operator="||";} ExtraTerms=GameInfoPredicate_Term ExtraTerms=GameInfoPredicate_Or*;

def GameInfoPredicate_Term=GameInfoPredicate;
GameInfoPredicate_Term = 
    lpar this=GameInfoPredicate rpar |
    bang this=GameInfoPredicate_Term {ReturnValue.Negated=true;} | 
    this=GameInfoPredicate_Base;

GameInfoPredicate = {ReturnValue.Operator="&&";} ExtraTerms=GameInfoPredicateOr ExtraTerms=GameInfoPredicate_And*;



GameSelection = Assignment=PlayerAssignment? SelectPosition = TOKEN.Position SELECT GameCondition=GameInfoPredicate;

PlayerAssignment = WithPosition = TOKEN.Position WITH PlayerPosition = TOKEN.Position AffectedPlayer=idf PlayerCondition=GameInfoPredicate;
Result_Record = RecordPosition = TOKEN.Position RECORD  FilePosition = TOKEN.Position OutFile=string;
Result_Print = PrintPosition = TOKEN.Position PRINT;
Result = this=Result_Record | this=Result_Print;

Selection =  Games=GameSelection SituationFilter=Filter? Output=Result semi;

def Statement=Statement;
def Module=Module;
def VariableDeclaration=VariableDeclaration;
def VariableDeclaration_Filter=VariableDeclaration_Filter;
def VariableDeclaration_GameList=VariableDeclaration_GameList;
def VariableDeclaration_PlayerSelection=VariableDeclaration_PlayerSelection;
def VariableDeclaration_GameInfoPredicate=VariableDeclaration_GameInfoPredicate;

VariableDeclaration_Filter = FilterPosition=TOKEN.Position FILTER NamePosition = TOKEN.Position Name = idf eq Component=Filter_Component semi;
VariableDeclaration_GameList = GamePosition=TOKEN.Position GAMES NamePosition = TOKEN.Position Name = idf eq Selection=GameSelection semi;
VariableDeclaration_PlayerSelection = GamePosition=TOKEN.Position PlayerSelection NamePosition = TOKEN.Position Name = idf eq 
    Predicate=GameInfoPredicate semi;
VariableDeclaration_GameInfoPredicate = GamePosition=TOKEN.Position GamePredicate NamePosition = TOKEN.Position Name = idf eq Predicate=GameInfoPredicate semi;
VariableDeclaration = this=VariableDeclaration_Filter | this=VariableDeclaration_GameList | this=VariableDeclaration_GameInfoPredicate 
    | this=VariableDeclaration_PlayerSelection;

Module = Statements=Statement*;

def Identifier=Identifier;
def IdentifierPart = Token;
def IdentifierPart_Rest = Token;
IdentifierPart = Position=TOKEN.Position Value=idf;
IdentifierPart_Rest = dot this=IdentifierPart;
Identifier = Parts=IdentifierPart Parts=IdentifierPart_Rest*;

def Import=Import;
def ImportBinding=ImportBinding;
ImportBinding = AsPosition = TOKEN.Position AS ImportName=IdentifierPart;
Import =  ImportPosition=TOKEN.Position IMPORT  ImportPath=Identifier Binding=ImportBinding? semi;

Statement = this=VariableDeclaration | this=Selection | this=Import;
