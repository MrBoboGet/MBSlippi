term lpar = "\(";
term rpar = "\)";
term lcurl = "\{";
term rcurl = "\}";
term lsquare = "\[";
term rsquare = "\]";
term semicolon = ";";

term number = "[[:digit:]]+";
term string = "$\"((\\.|[^\"\\])*)\"";
term bool = "true|false";


term WITH = "WITH";
term SELECT = "SELECT";
term RECORD = "RECORD";
term FILTER = "FILTER";

term idf = "[[:alpha:]_]+[[:alnum:]_]*";

term leq = "<=";
term less = "<";
term geq = ">=";
term great = ">";
term neq = "!=";
term colon = ":";
term comma = ",";
term eq = "=";
term dot = "\.";
term OR = "\|\|";
term pipe = "\|";
term AND = "&&";
term add = "&";
term que = "\?";
skip "( |\t|\n|\r)*";

struct Operator
{
    string Op;
}
struct GameSelection
{
    tokenPos SelectPosition;
    GameInfoPredicate GameCondition;
}
struct GameInfoPredicate_Conjunction
{
    string Conjunction;
    GameInfoPredicate RHS;
}

struct AttributeComponent
{
    tokenPos NamePosition;
    string Name;
}

struct GameInfoPredicate
{
    List<AttributeComponent> Attribute;
    tokenPos ValuePosition;
    string Value;
    string Comparison;
    {uint64_t} DateValue;
    string Operator;
    List<GameInfoPredicate> ExtraTerms;
}
struct GameInfoPredicate_OperatorList
{
    List<GameInfoPredicate> Terms;    
}

struct PlayerAssignment
{
    tokenPos WithPosition;
    tokenPos PlayerPosition;
    string AffectedPlayer;
    GameInfoPredicate PlayerCondition;
}

struct Filter_ArgList
{
    List<Filter_Arg> Arguments;    
}
struct Filter_Arg
{
}
struct Filter_Arg_Positional : Filter_Arg
{
    tokenPos ValuePosition;
    string Value; 
}
struct Filter_Arg_Named : Filter_Arg
{
    tokenPos NamePosition;
    string Name;
    tokenPos ValuePosition;
    string Value;
}
struct ArgList
{
    List<Filter_Arg> Args;
}
struct AttributeList
{
    List<AttributeComponent> Attributes;
}
struct Filter_Component
{
    tokenPos NamePosition;
    string FilterName; 
    Filter_ArgList ArgumentList;
    string Operator;
    List<Filter_Component> ExtraTerms;
}
struct Filter_OperatorList
{
    List<Filter_Component> Components;    
}
struct Filter
{
    tokenPos FilterPosition;
    Filter_Component Component;
}
struct Result {}
struct Result_Record : Result
{
    tokenPos RecordPosition;
    string OutFile;
}
struct Result_Tabulate : Result
{
        
}
struct SlippiSpec
{
    PlayerAssignment Assignment;
    GameSelection Games;
    Filter SituationFilter;
    Result Output;
}
def SlippiSpec=SlippiSpec;
def Result=Result_Record;
def PlayerAssignment=PlayerAssignment;

def GameSelection=GameSelection;
def GameInfoPredicate=GameInfoPredicate;
def GameInfoPredicate_Base=GameInfoPredicate;

def Filter=Filter;
def Filter_Component=Filter_Component;
def Filter_Component_Base=Filter_Component;
def Filter_Arg=Filter_Arg;
def Filter_Arg_Named=Filter_Arg_Named;
def Filter_Arg_Positional=Filter_Arg_Positional;
def Filter_ArgList = ArgList;
def Operator=Operator;

Operator = Op=less|Op=pipe|Op=AND|Op=OR|Op=add|Op=great | Op=eq | Op=leq | Op=geq | Op=neq;
def Filter_Arg_Extra = Filter_Arg;
Filter_Arg_Extra = comma this=Filter_Arg;
Filter_Arg = this=Filter_Arg_Named | this=Filter_Arg_Positional;
Filter_Arg_Named = Name=idf eq Value=string;
Filter_Arg_Positional = Value=string;
def Filter_ArgList_Arguments = ArgList;
Filter_ArgList_Arguments = Args=Filter_Arg Args=Filter_Arg_Extra*;
Filter_ArgList = lpar this=Filter_ArgList_Arguments? rpar;


def Filter_Component_Or=Filter_Component;
def Filter_Component_And=Filter_Component;
def Filter_OperatorList=Filter_OperatorList;

Filter_Component_And = Operator=add this=Filter_Component;
Filter_Component_Or = Operator=pipe this=Filter_Component;
Filter_OperatorList = Components=Filter_Component_And+ | Components=Filter_Component_Or+;
Filter_Component_Base = NamePosition = TOKEN.Position FilterName=idf ArgumentList.Arguments=Filter_ArgList.Args?;

Filter_Component = lpar ExtraTerms=Filter_Component rpar ExtraTerms=Filter_OperatorList.Components?| this=Filter_Component_Base ExtraTerms=Filter_OperatorList.Components?;

Filter= FilterPosition = TOKEN.Position FILTER Component=Filter_Component;


def GameInfoPredicate_Or=GameInfoPredicate;
def GameInfoPredicate_And=GameInfoPredicate;
def GameInfoPredicate_OperatorList=GameInfoPredicate_OperatorList;

def Attribute_Extension = AttributeComponent;
def Attribute_Base = AttributeComponent;
def Attribute_List = AttributeList;
Attribute_Base = NamePosition = TOKEN.Position Name=idf;
Attribute_Extension = dot NamePosition = TOKEN.Position Name=idf;
Attribute_List = Attributes=Attribute_Base Attributes=Attribute_Extension*;

GameInfoPredicate_Or = Operator=OR this=GameInfoPredicate;
GameInfoPredicate_And = Operator=AND this=GameInfoPredicate;
GameInfoPredicate_OperatorList= Terms=GameInfoPredicate_Or+ | Terms=GameInfoPredicate_And+;
GameInfoPredicate_Base = Attribute=Attribute_List.Attributes Comparison=Operator.Op ValuePosition = TOKEN.Position Value=string;


GameInfoPredicate = lpar ExtraTerms=GameInfoPredicate rpar ExtraTerms=GameInfoPredicate_OperatorList.Terms? |
    this=GameInfoPredicate_Base ExtraTerms=GameInfoPredicate_OperatorList.Terms?; 
GameSelection = SelectPosition = TOKEN.Position SELECT GameCondition=GameInfoPredicate;

PlayerAssignment = WithPosition = TOKEN.Position WITH PlayerPosition = TOKEN.Position AffectedPlayer=idf PlayerCondition=GameInfoPredicate;
Result = RecordPosition = TOKEN.Position RECORD OutFile=string;
SlippiSpec= Assignment=PlayerAssignment? Games=GameSelection SituationFilter=Filter? Output=Result;
